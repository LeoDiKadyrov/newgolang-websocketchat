// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/jwt/refresh": {
            "post": {
                "description": "Refreshes the JWT access and refresh tokens for a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "jwt"
                ],
                "summary": "Refresh JWT Tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh Token",
                        "name": "refreshToken",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_jwt.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User Registration Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_user_save.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered user and generated JWT tokens",
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_user_save.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request with details",
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_user_save.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "description": "Deletes a user from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "description": "User Deletion Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_user_delete.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted user",
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_user_delete.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request with details",
                        "schema": {
                            "$ref": "#/definitions/internal_http_server_handlers_user_delete.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_http_server_handlers_jwt.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "jwtAccessToken": {
                    "type": "string"
                },
                "jwtRefreshToken": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "internal_http_server_handlers_user_delete.DeleteRequest": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 4
                }
            }
        },
        "internal_http_server_handlers_user_delete.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "description": "Username that was registered",
                    "type": "string"
                }
            }
        },
        "internal_http_server_handlers_user_save.Request": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email of the user",
                    "type": "string"
                },
                "password": {
                    "description": "Password of the user",
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 8
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string",
                    "maxLength": 24,
                    "minLength": 4
                }
            }
        },
        "internal_http_server_handlers_user_save.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "jwtAccessToken": {
                    "description": "Access JWT token for the user",
                    "type": "string"
                },
                "jwtRefreshToken": {
                    "description": "Refresh JWT token for the user",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "description": "Username that was registered",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "WebSocket Chat API",
	Description:      "This is a sample server for a WebSocket chat application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
