// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	jwt "github.com/dgrijalva/jwt-go"
	mock "github.com/stretchr/testify/mock"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// ExtractToken provides a mock function with given fields: r
func (_m *TokenService) ExtractToken(r *http.Request) (string, error) {
	ret := _m.Called(r)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (string, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTokens provides a mock function with given fields: userID
func (_m *TokenService) GenerateTokens(userID int64) (string, string, error) {
	ret := _m.Called(userID)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(int64) (string, string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) string); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *TokenService) ValidateToken(tokenString string) (*jwt.StandardClaims, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.StandardClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.StandardClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.StandardClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.StandardClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
